@page "/players"
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer

@using Delfos.Aplication.Service.Request
@using Delfos.Domain.Entities
@using System.Text.Json
@using Delfos.Aplication.Service.Response
@using System.Text.Json.Serialization
@using System.Text


<h3>Players</h3>

<a class="btn btn-primary" href="/Players/create" role="button">Create Player</a>

@if (playerDto == null)
{
    <p><em>Loading...</em></p>
}

else
{
    <table class="table">
        <thead>
            <tr>
                <tr>
                    <td>Id</td>
                    <td>Name</td>
                    <rd></rd>

                </tr>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in playerDto)
            {
                <tr>
                    <td>@player.Id</td>
                    <td>@player.Name</td>


                    <a class="btn btn-primary" href="/Players/Update" role="button">Update</a>

                    <button class="btn btn-primary" @onclick="(() => DeletePlayer(player))">
                        <a>Delete</a>
                    </button>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<PlayerDto>? playerDto;
    private bool getPlayersError;
    private string getPlayersMessageErrors;
    private PlayerResponse response;

    protected override async Task OnInitializedAsync()
    {

        await GetAll();

    }

    public async Task UpdatePlayer(PlayerDto dto)
    {

    }
    public async Task DeletePlayer(PlayerDto dto)
    {
         try
            {
                var client = ClientFactory.CreateClient();

                // Prepare your data to be sent

                PlayerRequest playerRequest = new PlayerRequest(new List<PlayerDto> { dto });

                // Serialize the object to JSON
                var json = JsonSerializer.Serialize(playerRequest);
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                var request = new HttpRequestMessage
                    {
                        Method = HttpMethod.Delete,
                        RequestUri = new Uri("https://localhost:7195/api/Player/Delete"),
                        Content = content
                    };

                var httpResponse = await client.SendAsync(request);

                if (httpResponse.IsSuccessStatusCode)
                {
                    var playersStream = await httpResponse.Content.ReadAsStringAsync();
                    response = JsonSerializer.Deserialize<PlayerResponse>(playersStream);

                    // Process your response as needed
                    // players = playersResponse.PlayerEntitie;
                }
                else
                {
                    // Handle the error response if needed
                }

                await GetAll();
            }
            catch (HttpRequestException ex)
            {
                //getPlayersError = true;
                response.Message = $"HTTP request error: {ex}";
                // Log detalhes usando um logger
            }
    }

    public async Task GetAll()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7195/api/Player/GetAll");

            var client = ClientFactory.CreateClient();

            var httpResponse = await client.SendAsync(request);

            var playersStream = await httpResponse.Content.ReadAsStringAsync();

            var playersResponse = JsonSerializer.Deserialize<PlayerResponse>(playersStream);

            playerDto = playersResponse.PlayerEntitie;

        }
        catch (HttpRequestException ex)
        {
            getPlayersError = true;
            getPlayersMessageErrors = $"HTTP request error: {ex}";
            // Log detalhes usando um logger
        }
        catch (JsonException ex)
        {
            getPlayersError = true;
            getPlayersMessageErrors = $"JSON deserialization error: {ex}";
            // Log detalhes usando um logger
        }
    }
}